#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('app:server');
var http = require('http');



/* Handle signal interupt to shutdown both the app & the mongoDB server! */
if (process.platform === "win32") {
    var rl = require("readline").createInterface({
        input: process.stdin,
        output: process.stdout
    });

    rl.on("SIGINT", function() {
        process.emit("SIGINT");
    });
}

//graceful shutdown
process.on("SIGINT", function() {
    //shutdown monogDB server 1st
    //    end_dbPipe(dbChildProc);
    //shutdown node app next
    console.error("Shutting down node app...");
    process.exit();

});

/*Uncomment this section to start MongoDB & webapp together... had to disable due to docker issues*/

/*start MongoDB before launching app*/
/*
const spawn = require('child_process').spawn;
//const pipe = spawn('mongod', ['--dbpath=<LOCATION>', '--port', '<PORT>'])
const dbChildProc = spawn('mongod', ['--dbpath=c:\\data\\test', '--port', '27017']);
//Docker
//const dbChildProc = spawn('mongod', ['--dbpath=/data/db', '--port', '27017', '--bind_ip_all']);

dbChildProc.stdout.on('data', function(data) {
    //console.log(data.toString('utf8'));
    console.log(data.toString());
});

dbChildProc.stderr.on('data', (data) => {
    //console.log(data.toString('utf8'));
    console.log(data.toString());
});

dbChildProc.on('exit', (code, signal) => {
    console.log(`Process exited with code:  ${code} from signal: ${signal}`);
    process.exit();
});

function end_dbPipe(childProcess) {
    console.error("Shutting down MongoDB server...");
    childProcess.kill('SIGINT');
}


setTimeout(() => { for (var i = 0; i < 10000; i++) { let j = 1 + 1 } }, 2000); //give the MongoDB a chance to start up (2sec pause)
*/

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3003');
app.set('port', port);

/**
 * Create HTTP server and call the Car web app (app.js)
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    console.log('Listening on ' + bind);
}